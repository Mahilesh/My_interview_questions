#kubernetes cluster commands
kubectl cluster-info                  # Show cluster info (API server, DNS, etc.)
kubectl get nodes -o wide             # List all nodes with detailed info

#kubernetes pod commands
kubectl get pods                      # List all pods in current namespace
kubectl get pods -o wide              # List pods with more details (IP, node, etc.)
kubectl get pods -l <label>=<value>   # List pods matching a label
kubectl get pod <pod-name>            # Get details of a single pod
kubectl describe pod <pod-name>       # Detailed pod information (events, conditions)

#kubernetes logs checking commands
kubectl logs <pod-name>               # Get logs from a pod
kubectl logs -f <pod-name>            # Stream logs (follow mode)
kubectl exec -it <pod-name> -- sh     # Open a shell inside a pod (if shell available)

#Pod Lifecycle
kubectl delete pod <pod-name>         # Delete a pod (it will restart if part of a Deployment/ReplicaSet)

#Resource Explanation
kubectl explain pod                   # Show documentation about Pod resource
kubectl explain pod.spec.containers   # Drill into specific fields of Pod spec

#kubernetes deployment commands
kubectl create deployment <name> --image=<image>                  # Create a deployment with specified name and image
kubectl get deployments                                           # List all deployments in the current namespace
kubectl describe deployment <name>                                # Show detailed information about a deployment
kubectl scale deployment <name> --replicas=<number>               # Scale the deployment to specified number of replicas
kubectl rollout restart deployment/<name>                         # Restart all pods in the deployment
kubectl rollout status deployment/<name>                          # Check rollout status of a deployment
kubectl create deployment <name> --image=<image> -o yaml          # Generate deployment YAML manifest
kubectl create deployment <name> --image=<image> -o yaml --dry-run=client   # Validate deployment creation locally without applying
kubectl create deployment <name> --image=<image> -o yaml --dry-run=client > name.yaml  # Save deployment YAML to file

#kubernetes service commands
kubectl get services                          # List all services in the current namespace
kubectl describe service <name>               # Show detailed information about a specific service
kubectl expose pod <name>                     # Expose a pod as a service
kubectl delete service <name>                 # Delete a service
kubectl port-forward <pod> <local-port>:<remote-port>   # Forward a local port to a pod's port




